// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qYXJkyifyxfQuqtTDFQCRa
// Component: 5irGb5N5YY
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_tiny_garden_solutions.module.css"; // plasmic-import: qYXJkyifyxfQuqtTDFQCRa/projectcss
import sty from "./PlasmicBlogText.module.css"; // plasmic-import: 5irGb5N5YY/css
import image14Szy5Gg0TXeh from "./images/image14.jpg"; // plasmic-import: SZY5Gg0tXEH/picture

export const PlasmicBlogText__VariantProps = new Array();

export const PlasmicBlogText__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicBlogText__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <div
      data-plasmic-name={"mainSectionBlog"}
      data-plasmic-override={overrides.mainSectionBlog}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.mainSectionBlog
      )}
    >
      <div className={classNames(projectcss.all, sty.columns__aIkjo)}>
        <div className={classNames(projectcss.all, sty.column___99SQg)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uKgM6)}
          >
            <div
              data-plasmic-name={"titel2"}
              data-plasmic-override={overrides.titel2}
              className={classNames(projectcss.all, sty.titel2)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Heading nummer 2"}
              </h1>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ybvBo)} />
            <div
              data-plasmic-name={"auteur"}
              data-plasmic-override={overrides.auteur}
              className={classNames(projectcss.all, sty.auteur)}
            >
              <div className={classNames(projectcss.all, sty.columns__r7Csv)}>
                <div className={classNames(projectcss.all, sty.column__rX8BA)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iaDk)}
                  >
                    <p.PlasmicImg
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"150px"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: image14Szy5Gg0TXeh,
                        fullWidth: 390,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5CPyI
                      )}
                    >
                      {"Luuk Sprock"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__uxH3)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v52Zf
                    )}
                  >
                    {
                      "Luuk vindt schrijven erg gaaf en houdt ook enorm van cannabis"
                    }
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"intro"}
              data-plasmic-override={overrides.intro}
              className={classNames(projectcss.all, sty.intro)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tXoVz
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "Het is voor velen het leukste wat er is: samen met vrienden een festival bezoeken om de tijd van je leven te hebben. Maar wat neem je allemaal mee, naast alle basisbenodigdheden? Haal het maximale uit je festivalervaring met onze outfit accessoires en essentials. Nu beschikbaar!"
                    }
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"mainText"}
              data-plasmic-override={overrides.mainText}
              className={classNames(projectcss.all, sty.mainText)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iHmct
                )}
              >
                {
                  "Auto Forbidden Cherry is een kruising tussen maar liefst drie wietsoorten. Te weten de klassieke en buiten altijd succesvolle Purple #1, de autoflower Auto Forbidden Fruit en de Noord-Amerikaanse traktatie Cherry Pie. Het is dan ook een genetische smeltkroes van wietsoorten die sterk smaken, een pimpelpaarse kleur krijgen en buiten bewezen goede resultaten opleveren.\n\nAls je besluit om buiten een paar Auto Forbidden Cherry planten neer te zetten, dan krijg je het makkelijk dit jaar. De wietsoort is door de sterke klassieke genetica namelijk zeer gemakkelijk te kweken, superstabiel en ook nog eens resistent tegen ziektes, schimmels en plagen. De wietsoort werd dan ook speciaal gemaakt om altijd en overal goed te kunnen groeien en bloeien.\n\nIn de groeifase beginnen planten van deze soort met brede bladvingers om veel licht op te kunnen vangen. Naarmate de plant groeit en de bloeifase aanbreekt, worden de bladeren langzaam smaller en krijgt de autoflower wat meer het uiterlijk van een hybride."
                }
              </div>
            </div>
          </p.Stack>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  mainSectionBlog: [
    "mainSectionBlog",
    "titel2",
    "h1",
    "auteur",
    "img",
    "intro",
    "mainText"
  ],

  titel2: ["titel2", "h1"],
  h1: ["h1"],
  auteur: ["auteur", "img"],
  img: ["img"],
  intro: ["intro"],
  mainText: ["mainText"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlogText__ArgProps,
          internalVariantPropNames: PlasmicBlogText__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBlogText__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainSectionBlog") {
    func.displayName = "PlasmicBlogText";
  } else {
    func.displayName = `PlasmicBlogText.${nodeName}`;
  }
  return func;
}

export const PlasmicBlogText = Object.assign(
  // Top-level PlasmicBlogText renders the root element
  makeNodeComponent("mainSectionBlog"),
  {
    // Helper components rendering sub-elements
    titel2: makeNodeComponent("titel2"),
    h1: makeNodeComponent("h1"),
    auteur: makeNodeComponent("auteur"),
    img: makeNodeComponent("img"),
    intro: makeNodeComponent("intro"),
    mainText: makeNodeComponent("mainText"),
    // Metadata about props expected for PlasmicBlogText
    internalVariantProps: PlasmicBlogText__VariantProps,
    internalArgProps: PlasmicBlogText__ArgProps
  }
);

export default PlasmicBlogText;
/* prettier-ignore-end */
