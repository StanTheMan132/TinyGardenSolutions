// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qYXJkyifyxfQuqtTDFQCRa
// Component: K9mBxKPq7acu
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: klxX5nKFAD/component
import Button2 from "../../Button2"; // plasmic-import: VS4Cm-DCBjr/component
import Product from "../../Product"; // plasmic-import: E8EB-KHnAO/component
import SurveyHomepage from "../../SurveyHomepage"; // plasmic-import: yqmiKgneAs/component
import Footer from "../../Footer"; // plasmic-import: cdtIcE32qk/component
import { useScreenVariants as useScreenVariantstvKzUvB7Ggzh0 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tvKzUvB7GGZH0/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_tiny_garden_solutions.module.css"; // plasmic-import: qYXJkyifyxfQuqtTDFQCRa/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: K9mBxKPq7acu/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: K_9f4twbCGN/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: EHJ7BhqsxCJ/icon
import tinyGardenMiniPnGpngPP2EHakp3 from "./images/tinyGardenMiniPnGpng.png"; // plasmic-import: pP2eHAKP3/picture
import tinyGardenProPnGpngENy3Jl5Ye from "./images/tinyGardenProPnGpng.png"; // plasmic-import: eNy3jl5Ye/picture

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstvKzUvB7Ggzh0()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />
          </section>
          <div className={classNames(projectcss.all, sty.freeBox___2Tv8)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__acnVd)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gbfVg
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <React.Fragment>{"Tiny Garden "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecoration: "underline" }}
                      >
                        {"Solutions"}
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>{"Tiny Garden "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecoration: "underline" }}
                      >
                        {"Solutions"}
                      </span>
                    </React.Fragment>
                  )}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mlCi9
                  )}
                >
                  {"Revolutionize the way we grow cannabis at home"}
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vFj7V)}
              >
                <Button2
                  className={classNames("__wab_instance", sty.button2__r5RL8)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__u4Z5J)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg___5FssV)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d0MGo
                    )}
                  >
                    {"Learn moreâ€¦"}
                  </div>
                </Button2>
              </p.Stack>
            </p.Stack>
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__e5E7J)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__ubZwq)} />
          <Product
            className={classNames("__wab_instance", sty.product___3Og94)}
          >
            <div className={classNames(projectcss.all, sty.columns___5ItvR)}>
              <div className={classNames(projectcss.all, sty.column__j1IFv)}>
                <div className={classNames(projectcss.all, sty.freeBox__wgjcH)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__i1Zw
                    )}
                  >
                    {"Tiny Garden Mini"}
                  </h1>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__tr6Kq)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: tinyGardenMiniPnGpngPP2EHakp3,
                      fullWidth: 4000,
                      fullHeight: 4000,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column___2L1K6)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bmx4J)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___2YSun)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__pt5DO
                      )}
                    >
                      {"Tiny Garden Mini"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hIa1O
                      )}
                    >
                      {
                        "The Tiny Garden Mini is perfect for the casual cannabis user."
                      }
                    </div>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gYwaC)}
                  >
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__gpCr
                      )}
                    >
                      {"Pre order now!"}
                    </Button2>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2___4Vn4
                      )}
                    >
                      {"Learn more"}
                    </Button2>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
          </Product>
          <Product className={classNames("__wab_instance", sty.product__stMgS)}>
            <div className={classNames(projectcss.all, sty.columns__lkc4Q)}>
              <div className={classNames(projectcss.all, sty.column___8CT12)}>
                <div className={classNames(projectcss.all, sty.freeBox__au8Dq)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__ijNlS
                    )}
                  >
                    {"Tiny Garden Mini"}
                  </h1>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__g2C3Z)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: tinyGardenProPnGpngENy3Jl5Ye,
                      fullWidth: 4000,
                      fullHeight: 4000,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__noj9R)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zqVui)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yaEgO)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1___4HGwd
                      )}
                    >
                      {"Tiny Garden Mini"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cTry
                      )}
                    >
                      {
                        "The Tiny Garden Mini is perfect for the casual cannabis user."
                      }
                    </div>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__eExFr)}
                  >
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2___1RnOx
                      )}
                    >
                      {"Pre order now!"}
                    </Button2>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__amBYj
                      )}
                    >
                      {"Learn more"}
                    </Button2>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
          </Product>
          <SurveyHomepage
            data-plasmic-name={"surveyHomepage"}
            data-plasmic-override={overrides.surveyHomepage}
            className={classNames("__wab_instance", sty.surveyHomepage)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "header", "navbar", "foreground2", "surveyHomepage", "footer"],
  header: ["header", "navbar"],
  navbar: ["navbar"],
  foreground2: ["foreground2"],
  surveyHomepage: ["surveyHomepage"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    navbar: makeNodeComponent("navbar"),
    foreground2: makeNodeComponent("foreground2"),
    surveyHomepage: makeNodeComponent("surveyHomepage"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
