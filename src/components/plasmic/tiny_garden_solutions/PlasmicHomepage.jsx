// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qYXJkyifyxfQuqtTDFQCRa
// Component: K9mBxKPq7acu
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: VS4Cm-DCBjr/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponent
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponentHelper
import { useScreenVariants as useScreenVariantstvKzUvB7Ggzh0 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tvKzUvB7GGZH0/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_tiny_garden_solutions.module.css"; // plasmic-import: qYXJkyifyxfQuqtTDFQCRa/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: K9mBxKPq7acu/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: K_9f4twbCGN/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: EHJ7BhqsxCJ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: MzqwOiA3on2/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: jFD2coGwBjR/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: T34fP_SwfOU/icon
import logo2TgGpngIyN5ULt from "./images/logo2TgGpng.png"; // plasmic-import: -_iyN5uLt/picture
import tinyGardenMiniPnGpngPP2EHakp3 from "./images/tinyGardenMiniPnGpng.png"; // plasmic-import: pP2eHAKP3/picture
import tinyGardenProPnGpngENy3Jl5Ye from "./images/tinyGardenProPnGpng.png"; // plasmic-import: eNy3jl5Ye/picture
import image2KhLCjzYxu9 from "./images/image2.svg"; // plasmic-import: KH-lCjzYXU9/picture

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstvKzUvB7Ggzh0()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__y4NYj)}>
              <div className={classNames(projectcss.all, sty.freeBox__wHjG)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qdZur)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"121px"}
                  loading={"lazy"}
                  src={{
                    src: logo2TgGpngIyN5ULt,
                    fullWidth: 995,
                    fullHeight: 642,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__efJAx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___37VrC
                  )}
                >
                  {"Blog"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cWeZh
                  )}
                >
                  {"Shop"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fw9Zo
                  )}
                >
                  {"Survey"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lQIkG
                  )}
                >
                  {"Login"}
                </div>
              </div>
            </div>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox___2Tv8)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__acnVd)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gbfVg
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <React.Fragment>{"Tiny Garden "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecoration: "underline" }}
                      >
                        {"Solutions"}
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>{"Tiny Garden "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecoration: "underline" }}
                      >
                        {"Solutions"}
                      </span>
                    </React.Fragment>
                  )}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mlCi9
                  )}
                >
                  {"Revolutionize the way we grow cannabis at home"}
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vFj7V)}
              >
                <Button2
                  className={classNames("__wab_instance", sty.button2__r5RL8)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__u4Z5J)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg___5FssV)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d0MGo
                    )}
                  >
                    {"Learn more…"}
                  </div>
                </Button2>
              </p.Stack>
            </p.Stack>
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__e5E7J)}
          >
            <div className={classNames(projectcss.all, sty.columns__ow2Rq)}>
              <div className={classNames(projectcss.all, sty.column__eAdKs)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__yMGjj)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"320px"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: tinyGardenMiniPnGpngPP2EHakp3,
                    fullWidth: 4000,
                    fullHeight: 4000,
                    aspectRatio: undefined
                  }}
                />

                <div
                  data-plasmic-name={"background2"}
                  data-plasmic-override={overrides.background2}
                  className={classNames(projectcss.all, sty.background2)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__m72G5)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__edxDw)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copy"}
                    data-plasmic-override={overrides.copy}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.copy)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__nAd2R)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gigbi
                        )}
                      >
                        {"Tiny Garden Mini"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___69Fbk
                        )}
                      >
                        {
                          "Consectetur a adipiscing sagittis sed proin libero himenaeos ornare adipiscing suscipit leo vestibulum facilisi consequat nisi nisi adipiscing habitant facilisis suspendisse hac integer eget quam facilisis sem placerat fames."
                        }
                      </div>
                    </p.Stack>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__qxAVx)}
                    >
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__quUrd
                        )}
                        color={"blue"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lBe2T
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__jmZcx
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__irmSr
                          )}
                        >
                          {"Order now"}
                        </div>
                      </Button2>
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__oBeoJ
                        )}
                        color={"clear"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__glUz3
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__j2Nz
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xbEa
                          )}
                        >
                          {"Learn more…"}
                        </div>
                      </Button2>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__r2Clq)}
          >
            <div className={classNames(projectcss.all, sty.columns__dmSa1)}>
              <div className={classNames(projectcss.all, sty.column__kmEwD)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__wFqXb)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"320px"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: tinyGardenProPnGpngENy3Jl5Ye,
                    fullWidth: 4000,
                    fullHeight: 4000,
                    aspectRatio: undefined
                  }}
                />

                <div
                  data-plasmic-name={"background3"}
                  data-plasmic-override={overrides.background3}
                  className={classNames(projectcss.all, sty.background3)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__ib7Eu)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dxQmA)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copy2"}
                    data-plasmic-override={overrides.copy2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.copy2)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ckmA)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vbtVz
                        )}
                      >
                        {"Tiny Garden Pro"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tQp2V
                        )}
                      >
                        {
                          "Consectetur a adipiscing sagittis sed proin libero himenaeos ornare adipiscing suscipit leo vestibulum facilisi consequat nisi nisi adipiscing habitant facilisis suspendisse hac integer eget quam facilisis sem placerat fames."
                        }
                      </div>
                    </p.Stack>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__msXyO)}
                    >
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__pUpdS
                        )}
                        color={"blue"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__jbe2J
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hjUnd
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__i8EM6
                          )}
                        >
                          {"Order now"}
                        </div>
                      </Button2>
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2___0T19Y
                        )}
                        color={"clear"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__tMlRu
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__c8Lku
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9Q2E
                          )}
                        >
                          {"Learn more…"}
                        </div>
                      </Button2>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
          </p.Stack>
          <div className={classNames(projectcss.all, sty.freeBox__xFpwR)}>
            <FormWrapper
              data-plasmic-name={"form"}
              data-plasmic-override={overrides.form}
              className={classNames("__wab_instance", sty.form)}
              extendedOnValuesChange={p.generateStateOnChangeProp($state, [
                "form",
                "value"
              ])}
              formItems={[
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ]}
              labelCol={{ span: 8, horizontalOnly: true }}
              layout={"vertical"}
              mode={"simplified"}
              submitSlot={
                <AntdButton
                  className={classNames("__wab_instance", sty.button__xGhiu)}
                  submitsForm={true}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wzWm
                    )}
                  >
                    {"Submit"}
                  </div>
                </AntdButton>
              }
              wrapperCol={{ span: 16, horizontalOnly: true }}
            >
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__hXThg)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p8QkF
                    )}
                  >
                    {"Name"}
                  </div>
                }
                name={"name"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.input),
                    onChange: p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input", "value"],
                      AntdInput_Helpers
                    ),
                    value: p.generateStateValueProp($state, ["input", "value"])
                  };
                  p.initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "input.value"
                      }
                    ],

                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <AntdInput
                      data-plasmic-name={"input"}
                      data-plasmic-override={overrides.input}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__hUdKw)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jpy4P
                    )}
                  >
                    {"Message"}
                  </div>
                }
                name={"message"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.textArea),
                    onChange: p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["textArea", "value"],
                      AntdTextArea_Helpers
                    ),
                    value: p.generateStateValueProp($state, [
                      "textArea",
                      "value"
                    ])
                  };
                  p.initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "textArea.value"
                      }
                    ],

                    [],
                    AntdTextArea_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <AntdTextArea
                      data-plasmic-name={"textArea"}
                      data-plasmic-override={overrides.textArea}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <AntdButton
                className={classNames("__wab_instance", sty.button__yo1Wh)}
                submitsForm={true}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cdarQ
                  )}
                >
                  {"Submit"}
                </div>
              </AntdButton>
            </FormWrapper>
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__vhU9F)}
          >
            <div className={classNames(projectcss.all, sty.column__bTo72)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rOfl)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__xRw20)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  src={{
                    src: image2KhLCjzYxu9,
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rwZ9N)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9NxWy
                    )}
                  >
                    {"Connect with us"}
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7Hz8R)}
                  >
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___5B6Tf)}
                      role={"img"}
                    />

                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__sAvpR)}
                      role={"img"}
                    />

                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg___6XMdo)}
                      role={"img"}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.column__iiTf1)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__i4RpN)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__edZxN
                  )}
                >
                  {"Product"}
                </div>
                <Button2
                  className={classNames("__wab_instance", sty.button2__hSi4)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__bdj2R)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__kwQw5)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aP1Ia
                    )}
                  >
                    {"Pricing"}
                  </div>
                </Button2>
                <Button2
                  className={classNames("__wab_instance", sty.button2___8CNeF)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__ptW8U)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__xaUr2)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l20ZE
                    )}
                  >
                    {"Log in"}
                  </div>
                </Button2>
                <Button2
                  className={classNames("__wab_instance", sty.button2___4Z5Hy)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__qc88)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__ncQy2)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oSCa
                    )}
                  >
                    {"Integrations"}
                  </div>
                </Button2>
                <Button2
                  className={classNames("__wab_instance", sty.button2__lgCf)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__nyrma)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__bJkhb)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gsW05
                    )}
                  >
                    {"Insights"}
                  </div>
                </Button2>
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.column___5F1Sg)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ryUwA)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ppz32
                  )}
                >
                  {"Support"}
                </div>
                <Button2
                  className={classNames("__wab_instance", sty.button2__jhxJp)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__wDqrm)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg___9Syty)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__unEgM
                    )}
                  >
                    {"Documentation"}
                  </div>
                </Button2>
                <Button2
                  className={classNames("__wab_instance", sty.button2__ubFKt)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg___9V2Z6)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__fVqsR)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n6VW
                    )}
                  >
                    {"FAQs"}
                  </div>
                </Button2>
                <Button2
                  className={classNames("__wab_instance", sty.button2__x13L4)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__bq2JO)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__uvbxF)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vaidR
                    )}
                  >
                    {"Status"}
                  </div>
                </Button2>
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.column___6FOqE)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___6DPqd)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9SEga
                  )}
                >
                  {"Company"}
                </div>
                <Button2
                  className={classNames("__wab_instance", sty.button2__cKra)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__qy2H8)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg___6TcsW)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4KwnC
                    )}
                  >
                    {"About"}
                  </div>
                </Button2>
                <Button2
                  className={classNames("__wab_instance", sty.button2___5Vv04)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__wGbxV)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__e2X7O)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wRBf7
                    )}
                  >
                    {"Contact us"}
                  </div>
                </Button2>
                <Button2
                  className={classNames("__wab_instance", sty.button2__zKPX)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__rgaCk)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__loC)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kErUq
                    )}
                  >
                    {"Careers"}
                  </div>
                </Button2>
                <Button2
                  className={classNames("__wab_instance", sty.button2___7WTfi)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__pLNoK)}
                      role={"img"}
                    />
                  }
                  size={"minimal"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__o0Md)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qh5No
                    )}
                  >
                    {"Media"}
                  </div>
                </Button2>
              </p.Stack>
            </div>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "foreground2",
    "background2",
    "copy",
    "background3",
    "copy2",
    "form",
    "input",
    "textArea"
  ],

  header: ["header"],
  foreground2: ["foreground2"],
  background2: ["background2"],
  copy: ["copy"],
  background3: ["background3"],
  copy2: ["copy2"],
  form: ["form", "input", "textArea"],
  input: ["input"],
  textArea: ["textArea"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    foreground2: makeNodeComponent("foreground2"),
    background2: makeNodeComponent("background2"),
    copy: makeNodeComponent("copy"),
    background3: makeNodeComponent("background3"),
    copy2: makeNodeComponent("copy2"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
