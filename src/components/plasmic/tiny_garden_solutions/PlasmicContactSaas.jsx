// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qYXJkyifyxfQuqtTDFQCRa
// Component: xsieR2sgf2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: VS4Cm-DCBjr/component
import TextInput from "../../TextInput"; // plasmic-import: owGtneM1utE/component
import Select from "../../Select"; // plasmic-import: Ric4jps1ZGe/component
import Select__Option from "../../Select__Option"; // plasmic-import: 6R7wK_O9k4U/component
import Checkbox from "../../Checkbox"; // plasmic-import: QPLNTBR3_IIG/component
import Footer from "../../Footer"; // plasmic-import: cdtIcE32qk/component
import { useScreenVariants as useScreenVariantstvKzUvB7Ggzh0 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tvKzUvB7GGZH0/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_tiny_garden_solutions.module.css"; // plasmic-import: qYXJkyifyxfQuqtTDFQCRa/projectcss
import sty from "./PlasmicContactSaas.module.css"; // plasmic-import: xsieR2sgf2/css
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: hJVqRoo8T1m/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: CQ2DYR63g8S/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: K_9f4twbCGN/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: ZEZum5JdJYg/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 6jcESFctCjp/icon
import image131OzKv2WggqS from "./images/image13.jpg"; // plasmic-import: 1ozKV2wggqS/picture
import image12BOu6HVJejY0 from "./images/image12.jpg"; // plasmic-import: bOU6hVJejY0/picture

export const PlasmicContactSaas__VariantProps = new Array();

export const PlasmicContactSaas__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicContactSaas__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstvKzUvB7Ggzh0()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hf0Pz)}>
            <div className={classNames(projectcss.all, sty.freeBox___7NtsE)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pXhWu)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bJNn)}
                >
                  {true ? (
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__d6Lh
                      )}
                    >
                      <Icon5Icon
                        className={classNames(projectcss.all, sty.svg___4GYbs)}
                        role={"img"}
                      />
                    </a>
                  ) : null}
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___9G8Fq)}
                  >
                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__otOmT
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__xckSn)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dcRmh
                        )}
                      >
                        {"About Us"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__bPdlC)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__tEKqI
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__nCnN)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q5HmJ
                        )}
                      >
                        {"Features"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___7VqKz
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___3KCaI
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__yaI6Z)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hJpu1
                        )}
                      >
                        {"Pricing "}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6GwS0
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__zupYz
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__xiBfE)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mubet
                        )}
                      >
                        {"Contact"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__gVzJg)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__bOhG3
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__yWoUi)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y2UwV
                        )}
                      >
                        {"Blog"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6IuMq
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__d7T5C
                      )}
                      endIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__iKdZw)}
                          role={"img"}
                        />
                      }
                      shape={"rounded"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___7Cl9J
                          )}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xaU40
                        )}
                      >
                        {"Get started"}
                      </div>
                    </Button2>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
          </div>
          <div
            data-plasmic-name={"pageBanner"}
            data-plasmic-override={overrides.pageBanner}
            className={classNames(projectcss.all, sty.pageBanner)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__n4IMt)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__qPltE)}
              >
                <div className={classNames(projectcss.all, sty.column__nkWo)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__a8SZ)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Contact Us"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jIhQs
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                      }
                    </div>
                  </p.Stack>
                </div>
                <div className={classNames(projectcss.all, sty.column__jqUgE)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___1SHxE)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "lazy"
                        : "lazy"
                    }
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: image131OzKv2WggqS,
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }
                        : {
                            src: image131OzKv2WggqS,
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }
                    }
                  />
                </div>
              </p.Stack>
            </div>
          </div>
          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div className={classNames(projectcss.all, sty.columns__zIrpn)}>
              <div className={classNames(projectcss.all, sty.column__pnGhG)}>
                <div
                  data-plasmic-name={"container4"}
                  data-plasmic-override={overrides.container4}
                  className={classNames(projectcss.all, sty.container4)}
                >
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3
                    )}
                  >
                    {"Get in touch"}
                  </h3>
                  <label
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.label__tSmGi
                    )}
                  >
                    {"Name"}
                  </label>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg___9MJj6)}
                        role={"img"}
                      />
                    }
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={" "}
                    startIcon={
                      <SearchsvgIcon
                        className={classNames(projectcss.all, sty.svg__vTem)}
                        role={"img"}
                      />
                    }
                    value={
                      p.generateStateValueProp($state, [
                        "textInput",
                        "value"
                      ]) ?? ""
                    }
                  />

                  <label
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.label___3Jsbh
                    )}
                  >
                    {"Email"}
                  </label>
                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    className={classNames("__wab_instance", sty.textInput2)}
                    endIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg___49CzB)}
                        role={"img"}
                      />
                    }
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "textInput2",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={" "}
                    startIcon={
                      <SearchsvgIcon
                        className={classNames(projectcss.all, sty.svg___04Sq4)}
                        role={"img"}
                      />
                    }
                    value={
                      p.generateStateValueProp($state, [
                        "textInput2",
                        "value"
                      ]) ?? ""
                    }
                  />

                  <label
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.label__bu9Pt
                    )}
                  >
                    {"Subject"}
                  </label>
                  <Select
                    data-plasmic-name={"select"}
                    data-plasmic-override={overrides.select}
                    className={classNames("__wab_instance", sty.select)}
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, ["select", "value"])(
                        eventArgs[0]
                      );
                    }}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cOrMo
                        )}
                      >
                        {"Please select"}
                      </div>
                    }
                    value={p.generateStateValueProp($state, [
                      "select",
                      "value"
                    ])}
                  >
                    <Select__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option__m9Jz8
                      )}
                      value={"value1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aIfal
                        )}
                      >
                        {"Option 1"}
                      </div>
                    </Select__Option>
                    <Select__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option__udbCj
                      )}
                      value={"value2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sw99E
                        )}
                      >
                        {"Option 2"}
                      </div>
                    </Select__Option>
                  </Select>
                  <label
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.label__uzlqP
                    )}
                  >
                    {"Message"}
                  </label>
                  <textarea
                    data-plasmic-name={"textarea"}
                    data-plasmic-override={overrides.textarea}
                    className={classNames(
                      projectcss.all,
                      projectcss.textarea,
                      sty.textarea
                    )}
                    onChange={e => {
                      p.generateStateOnChangeProp($state, [
                        "textarea",
                        "value"
                      ])(e.target.value);
                    }}
                    ref={ref => {
                      $refs["textarea"] = ref;
                    }}
                    value={
                      p.generateStateValueProp($state, ["textarea", "value"]) ??
                      ""
                    }
                  />

                  <Checkbox
                    data-plasmic-name={"checkbox"}
                    data-plasmic-override={overrides.checkbox}
                    className={classNames("__wab_instance", sty.checkbox)}
                    isChecked={
                      p.generateStateValueProp($state, [
                        "checkbox",
                        "isChecked"
                      ]) ?? false
                    }
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "checkbox",
                        "isChecked"
                      ])(eventArgs[0]);
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__csuJd
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "I understand that this form is \nstoring my submitted information \nso I can be contacted."
                        : "I understand that this form is storing"}
                    </div>
                  </Checkbox>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s6Oc)}
                    >
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2___5Hqpj
                        )}
                        color={"blue"}
                        endIcon={
                          <Icon6Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__glRJv
                            )}
                            role={"img"}
                          />
                        }
                        shape={"rounded"}
                        showEndIcon={true}
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bJgE
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__epljS
                          )}
                        >
                          {"Start Now"}
                        </div>
                      </Button2>
                    </div>
                  ) : null}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__q5LsZ)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__tul5X)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: image12BOu6HVJejY0,
                    fullWidth: 1920,
                    fullHeight: 1280,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageBanner",
    "h1",
    "mainSection",
    "container4",
    "h3",
    "textInput",
    "textInput2",
    "select",
    "textarea",
    "checkbox",
    "footer"
  ],

  pageBanner: ["pageBanner", "h1"],
  h1: ["h1"],
  mainSection: [
    "mainSection",
    "container4",
    "h3",
    "textInput",
    "textInput2",
    "select",
    "textarea",
    "checkbox"
  ],

  container4: [
    "container4",
    "h3",
    "textInput",
    "textInput2",
    "select",
    "textarea",
    "checkbox"
  ],

  h3: ["h3"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  select: ["select"],
  textarea: ["textarea"],
  checkbox: ["checkbox"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContactSaas__ArgProps,
          internalVariantPropNames: PlasmicContactSaas__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContactSaas__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContactSaas";
  } else {
    func.displayName = `PlasmicContactSaas.${nodeName}`;
  }
  return func;
}

export const PlasmicContactSaas = Object.assign(
  // Top-level PlasmicContactSaas renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageBanner: makeNodeComponent("pageBanner"),
    h1: makeNodeComponent("h1"),
    mainSection: makeNodeComponent("mainSection"),
    container4: makeNodeComponent("container4"),
    h3: makeNodeComponent("h3"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    select: makeNodeComponent("select"),
    textarea: makeNodeComponent("textarea"),
    checkbox: makeNodeComponent("checkbox"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicContactSaas
    internalVariantProps: PlasmicContactSaas__VariantProps,
    internalArgProps: PlasmicContactSaas__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicContactSaas;
/* prettier-ignore-end */
