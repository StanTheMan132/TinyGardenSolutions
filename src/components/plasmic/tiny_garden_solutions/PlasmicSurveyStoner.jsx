// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qYXJkyifyxfQuqtTDFQCRa
// Component: jKKz051o73
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: klxX5nKFAD/component
import PageBanner2 from "../../PageBanner2"; // plasmic-import: 4PqtYFOawF/component
import Footer from "../../Footer"; // plasmic-import: cdtIcE32qk/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_tiny_garden_solutions.module.css"; // plasmic-import: qYXJkyifyxfQuqtTDFQCRa/projectcss
import sty from "./PlasmicSurveyStoner.module.css"; // plasmic-import: jKKz051o73/css
import image18Xf5G1FYwy from "./images/image18.png"; // plasmic-import: Xf5g1fYwy/picture

export const PlasmicSurveyStoner__VariantProps = new Array();

export const PlasmicSurveyStoner__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSurveyStoner__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />
          </section>
          <PageBanner2
            data-plasmic-name={"pageBanner2"}
            data-plasmic-override={overrides.pageBanner2}
            className={classNames("__wab_instance", sty.pageBanner2)}
            slot={
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"What type of stoner are you?"}
              </div>
            }
            slot2={
              "Do the stoner test now and find out what type of stoner you are!\nAre you more the hippy stoner, or a true connoisseur "
            }
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: image18Xf5G1FYwy,
                fullWidth: 1170,
                fullHeight: 780,
                aspectRatio: undefined
              }}
            />
          </PageBanner2>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "section", "navbar", "pageBanner2", "img", "text", "footer"],
  section: ["section", "navbar"],
  navbar: ["navbar"],
  pageBanner2: ["pageBanner2", "img", "text"],
  img: ["img"],
  text: ["text"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSurveyStoner__ArgProps,
          internalVariantPropNames: PlasmicSurveyStoner__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSurveyStoner__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSurveyStoner";
  } else {
    func.displayName = `PlasmicSurveyStoner.${nodeName}`;
  }
  return func;
}

export const PlasmicSurveyStoner = Object.assign(
  // Top-level PlasmicSurveyStoner renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    navbar: makeNodeComponent("navbar"),
    pageBanner2: makeNodeComponent("pageBanner2"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicSurveyStoner
    internalVariantProps: PlasmicSurveyStoner__VariantProps,
    internalArgProps: PlasmicSurveyStoner__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSurveyStoner;
/* prettier-ignore-end */
