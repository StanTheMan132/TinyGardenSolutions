// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qYXJkyifyxfQuqtTDFQCRa
// Component: yqmiKgneAs
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: VS4Cm-DCBjr/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_tiny_garden_solutions.module.css"; // plasmic-import: qYXJkyifyxfQuqtTDFQCRa/projectcss
import sty from "./PlasmicSurveyHomepage.module.css"; // plasmic-import: yqmiKgneAs/css
import image4Jw4E1MXt4Lz from "./images/image4.jpg"; // plasmic-import: jw4E1mXT4Lz/picture
import image14Szy5Gg0TXeh from "./images/image14.jpg"; // plasmic-import: SZY5Gg0tXEH/picture
import image18Xf5G1FYwy from "./images/image18.png"; // plasmic-import: Xf5g1fYwy/picture
import image3AdWssQiCi6 from "./images/image3.svg"; // plasmic-import: ad-wssQICi6/picture

export const PlasmicSurveyHomepage__VariantProps = new Array();

export const PlasmicSurveyHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSurveyHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__rsTcV)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__doAwM)}
        >
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__uuF24
            )}
          >
            {"What type of stoner are you?"}
          </h1>
          <div className={classNames(projectcss.all, sty.freeBox__da3Zl)} />
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vgGbq
            )}
          >
            {"Do the test and find out now!"}
          </div>
        </p.Stack>
        <div className={classNames(projectcss.all, sty.freeBox__hc21H)}>
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__qgoE)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ynWv)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__vxEam
                  )}
                >
                  {"The true Connoisseur"}
                </h1>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___4F5Tw)}
                  displayHeight={"auto"}
                  displayMaxHeight={"150px"}
                  displayMaxWidth={"200px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: image4Jw4E1MXt4Lz,
                    fullWidth: 1920,
                    fullHeight: 1280,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qiFl6
                  )}
                >
                  {
                    "This stoner knows everything there is to know about weed and always knows"
                  }
                </div>
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.column__y8OAm)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hOAn)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__fofK6
                  )}
                >
                  {"The Muncher"}
                </h1>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__gs7Pi)}
                  displayHeight={"auto"}
                  displayMaxHeight={"150px"}
                  displayMaxWidth={"200px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: image14Szy5Gg0TXeh,
                    fullWidth: 390,
                    fullHeight: 290,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c3Q64
                  )}
                >
                  {
                    "The Muncher is the type of stoners that eats everything they can find when they are high."
                  }
                </div>
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.column__pPqee)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gqZ0C)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__gmH7A
                  )}
                >
                  {"The Cook"}
                </h1>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__k92Ce)}
                  displayHeight={"auto"}
                  displayMaxHeight={"150px"}
                  displayMaxWidth={"200px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: image18Xf5G1FYwy,
                    fullWidth: 1170,
                    fullHeight: 780,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wwiG
                  )}
                >
                  {
                    "The cook always makes great edibles to send you right to space. "
                  }
                </div>
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.column__iwBVv)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vULdC)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__s0GpI
                  )}
                >
                  {"???"}
                </h1>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__iIvih)}
                  displayHeight={"auto"}
                  displayMaxHeight={"150px"}
                  displayMaxWidth={"200px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={image3AdWssQiCi6}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xWwf
                  )}
                >
                  {"Do the test and find out what type of stoner you are now!"}
                </div>
              </p.Stack>
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___60Nz1)}>
          <Button2
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            className={classNames("__wab_instance", sty.button2)}
            shape={"rounded"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ss8KT
              )}
            >
              {"Do the test now!"}
            </div>
          </Button2>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "button2"],
  columns: ["columns"],
  button2: ["button2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSurveyHomepage__ArgProps,
          internalVariantPropNames: PlasmicSurveyHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSurveyHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSurveyHomepage";
  } else {
    func.displayName = `PlasmicSurveyHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicSurveyHomepage = Object.assign(
  // Top-level PlasmicSurveyHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    button2: makeNodeComponent("button2"),
    // Metadata about props expected for PlasmicSurveyHomepage
    internalVariantProps: PlasmicSurveyHomepage__VariantProps,
    internalArgProps: PlasmicSurveyHomepage__ArgProps
  }
);

export default PlasmicSurveyHomepage;
/* prettier-ignore-end */
